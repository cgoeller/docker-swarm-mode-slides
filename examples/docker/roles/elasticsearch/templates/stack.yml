---
# {{ ansible_managed }}
version: '3.5'

volumes:
  esdata:
    external: false

networks:
    cluster:
      driver: overlay
      driver_opts:
        encrypted: "true"
    proxy:
      external: true
      name: net_proxy # the external name

services:
  elasticsearch:
    image: localhost:5000/elasticsearch
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - cluster
      - proxy
    environment:
{% for key, value in docker_container_env_vars.items() %}
      {{ key }}: "{{ value }}"
{% endfor %}
      ES_JAVA_OPTS: -Xms512m -Xmx512m -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=256m -XX:-AssumeMP
      discovery.zen.minimum_master_nodes: 2
      cluster.name: elasticsearch
      bootstrap.memory_lock: "false"
      http.cors.enabled: "true"
      http.cors.allow-origin: "*"
      # for jwilder/nginx-proxy
      VIRTUAL_HOST: es.test.local
      VIRTUAL_PORT: 9200
    healthcheck:
      disable: true
      # test: "curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s || exit 1"
      # interval: 1m30s
      # timeout: 50s
      # retries: 5
    ports:
      - "9200:9200"
    deploy:
      mode: global
      #replicas: 3
      endpoint_mode: vip # needed for exposed port in ingress mode
      labels:
        - "traefik.port=9200"
        - "traefik.docker.network=net_proxy"
        - "traefik.backend.loadbalancer.swarm=false" # do not use the load-balancing of docker (via VIP)
        - "traefik.frontend.rule=Host:es.test.local"
        - "traefik.backend.loadbalancer.method=drr" # drr = dynamic round robin
        - "traefik.frontend.auth.basic=user:$$apr1$$T6mNGVwu$$7JFSdReUyOCi/MwnDJBZe." # user:password
      resources:
        limits:
          memory: 1G
      update_config:
        parallelism: 1
        delay: 20s
      restart_policy:
        condition: on-failure
